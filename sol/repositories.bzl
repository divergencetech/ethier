"""Declare runtime dependencies

These are needed for local dev, and users must install them as well.
See https://docs.bazel.build/versions/main/skylark/deploying.html#dependencies
"""

load("@bazel_tools//tools/build_defs/repo:http.bzl", _http_archive = "http_archive")
load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")
load("//sol/private:toolchains_repo.bzl", "PLATFORMS", "toolchains_repo")
load("//sol/private:versions.bzl", "TOOL_VERSIONS", _LATEST = "LATEST_VERSION")

def http_archive(name, **kwargs):
    maybe(_http_archive, name = name, **kwargs)

LATEST_VERSION = _LATEST

# WARNING: any changes in this function may be BREAKING CHANGES for users
# because we'll fetch a dependency which may be different from one that
# they were previously fetching later in their WORKSPACE setup, and now
# ours took precedence. Such breakages are challenging for users, so any
# changes in this function should be marked as BREAKING in the commit message
# and released only in semver majors.
# This is all fixed by bzlmod, so we just tolerate it for now.
def rules_sol_dependencies():
    # The minimal version of bazel_skylib we require
    http_archive(
        name = "bazel_skylib",
        sha256 = "f7be3474d42aae265405a592bb7da8e171919d74c16f082a5457840f06054728",
        urls = [
            "https://github.com/bazelbuild/bazel-skylib/releases/download/1.2.1/bazel-skylib-1.2.1.tar.gz",
            "https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.2.1/bazel-skylib-1.2.1.tar.gz",
        ],
    )
    http_archive(
        name = "aspect_bazel_lib",
        sha256 = "a7977885ddafca6f4aa87fabcd47dba49ef5e9b513b8b3fa09d5a59606e7e4f0",
        strip_prefix = "bazel-lib-1.11.4",
        url = "https://github.com/aspect-build/bazel-lib/archive/refs/tags/v1.11.4.tar.gz",
    )
    http_archive(
        name = "aspect_rules_js",
        sha256 = "db9f446752fe4100320cf8487e8fd476b9af0adf6b99b601bcfd70b289bb0598",
        strip_prefix = "rules_js-1.1.2",
        url = "https://github.com/aspect-build/rules_js/archive/refs/tags/v1.1.2.tar.gz",
    )


########
# Remaining content of the file is only used to support toolchains.
########
_DOC = "Fetch external tools needed for sol toolchain"
_ATTRS = {
    "sol_version": attr.string(mandatory = True),
    "platform": attr.string(mandatory = True, values = PLATFORMS.keys()),
}

def _sol_repo_impl(repository_ctx):
    versions = TOOL_VERSIONS[repository_ctx.attr.platform]
    if repository_ctx.attr.sol_version in versions.keys():
        data = versions[repository_ctx.attr.sol_version]
    else:
        fail("""Version {} not mirrored into rules_sol, please file an issue.
        If needed, we can support usage of arbitrary versions so long as you supply the path and sha256.
        """.format(repository_ctx.attr.sol_version))
    url = "https://binaries.soliditylang.org/{}/{}".format(
        repository_ctx.attr.platform,
        data["path"],
    )
    integrity = data["sha256"]

    # FIXME: on windows, the path is to a zip, so needs download_and_extract
    repository_ctx.download(
        url = url,
        integrity = integrity,
        executable = True,
        output = data["path"],
    )
    build_content = """#Generated by sol/repositories.bzl
load("@//sol:toolchain.bzl", "sol_toolchain")
sol_toolchain(name = "sol_toolchain", target_tool = "{}")
""".format(data["path"])

    # Base BUILD file for this repository
    repository_ctx.file("BUILD.bazel", build_content)

sol_repositories = repository_rule(
    _sol_repo_impl,
    doc = _DOC,
    attrs = _ATTRS,
)

# Wrapper macro around everything above, this is the primary API
def sol_register_toolchains(name, **kwargs):
    """Convenience macro for users which does typical setup.

    - create a repository for each built-in platform like "sol_linux_amd64" -
      this repository is lazily fetched when solc is needed for that platform.
    - TODO: create a convenience repository for the host platform like "sol_host"
    - create a repository exposing toolchains for each platform like "sol_platforms"
    - register a toolchain pointing at each platform
    Users can avoid this macro and do these steps themselves, if they want more control.
    Args:
        name: base name for all created repos, like "sol1_14"
        **kwargs: passed to each sol_repositories call
    """
    for platform in PLATFORMS.keys():
        sol_repositories(
            name = name + "_" + platform,
            platform = platform,
            **kwargs
        )
        native.register_toolchains("@%s_toolchains//:%s_toolchain" % (name, platform))

    toolchains_repo(
        name = name + "_toolchains",
        user_repository_name = name,
    )
